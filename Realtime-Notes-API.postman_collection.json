{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Realtime Notes API",
		"description": "Complete API collection for the Realtime Notes Backend with authentication and all endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.token) {",
									"        pm.environment.set('authToken', response.token);",
									"        pm.environment.set('userId', response.user.id);",
									"        console.log('Token saved to environment:', response.token);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"newuser@example.com\",\n  \"password\": \"password123\",\n  \"name\": \"New User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Register a new user account. Token will be automatically saved to environment."
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.token) {",
									"        pm.environment.set('authToken', response.token);",
									"        pm.environment.set('userId', response.user.id);",
									"        console.log('Token saved to environment:', response.token);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"testuser@example.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login with email and password to get JWT token. Token will be automatically saved to environment."
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for user registration and login"
		},
		{
			"name": "Notes",
			"item": [
				{
					"name": "Get All Notes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes"
							]
						},
						"description": "Get all notes for the authenticated user"
					},
					"response": []
				},
				{
					"name": "Create Note",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"My First Note\",\n  \"content\": \"This is the content of my note\",\n  \"folderId\": null\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/notes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes"
							]
						},
						"description": "Create a new note"
					},
					"response": []
				},
				{
					"name": "Get Note by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notes/{{noteId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"{{noteId}}"
							]
						},
						"description": "Get a specific note by ID"
					},
					"response": []
				},
				{
					"name": "Update Note",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated Note Title\",\n  \"content\": \"Updated content of the note\",\n  \"folderId\": null\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/notes/{{noteId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"{{noteId}}"
							]
						},
						"description": "Update an existing note"
					},
					"response": []
				},
				{
					"name": "Delete Note",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notes/{{noteId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"{{noteId}}"
							]
						},
						"description": "Delete a note (soft delete)"
					},
					"response": []
				},
				{
					"name": "Search Notes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notes/search?q={{searchQuery}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{searchQuery}}",
									"description": "Search query to find notes by title or content"
								}
							]
						},
						"description": "Search notes by title or content"
					},
					"response": []
				},
				{
					"name": "Get Note Versions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notes/{{noteId}}/versions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								"{{noteId}}",
								"versions"
							]
						},
						"description": "Get version history for a specific note"
					},
					"response": []
				}
			],
			"description": "Notes CRUD operations and search functionality"
		},
		{
			"name": "Folders",
			"item": [
				{
					"name": "Get All Folders",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/folders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"folders"
							]
						},
						"description": "Get all folders for the authenticated user"
					},
					"response": []
				},
				{
					"name": "Create Folder",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"My New Folder\",\n  \"parentId\": null\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/folders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"folders"
							]
						},
						"description": "Create a new folder"
					},
					"response": []
				},
				{
					"name": "Get Folder by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/folders/{{folderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"folders",
								"{{folderId}}"
							]
						},
						"description": "Get a specific folder with its notes and children"
					},
					"response": []
				},
				{
					"name": "Update Folder",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Folder Name\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/folders/{{folderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"folders",
								"{{folderId}}"
							]
						},
						"description": "Update folder name"
					},
					"response": []
				},
				{
					"name": "Delete Folder",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/folders/{{folderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"folders",
								"{{folderId}}"
							]
						},
						"description": "Delete a folder (only if empty)"
					},
					"response": []
				}
			],
			"description": "Folder management operations"
		},
		{
			"name": "System",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check if the server is running"
					},
					"response": []
				}
			],
			"description": "System health and status endpoints"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string",
			"description": "JWT token obtained from login"
		},
		{
			"key": "noteId",
			"value": "1",
			"type": "string",
			"description": "ID of a note for testing"
		},
		{
			"key": "folderId",
			"value": "1",
			"type": "string",
			"description": "ID of a folder for testing"
		},
		{
			"key": "searchQuery",
			"value": "example",
			"type": "string",
			"description": "Search query for notes"
		}
	]
}
